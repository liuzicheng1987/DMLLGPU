struct SumDeltaActivation1 {

  Activation activation;
  NeuralNetworkNodeGPUCpp **hidden_nodesIAmFedIntoPtr;
  std::int32_t *NumWeightIAmToNodeIAmFedInto;
  

  SumDeltaActivation1(Activation _activation, NeuralNetworkNodeGPUCpp **_hidden_nodesIAmFedIntoPtr, std::int32_t *_NumWeightIAmToNodeIAmFedInto) : activation(_activation), hidden_nodesIAmFedIntoPtr(_hidden_nodesIAmFedIntoPtr), NumWeightIAmToNodeIAmFedInto(_NumWeightIAmToNodeIAmFedInto) {}
  
  __device__
  float operator()(std::int32_t &i) const {

      switch(this->activation) {

      case linear:
	return this->hidden_nodesIAmFedIntoPtr[0]->calc_dLdInput(this->NumWeightIAmToNodeIAmFedInto[0], i);

      default:
	return 0.0f;
      }
    }

};

void SumDeltaActivation(std::vector<NeuralNetworkNodeGPUCpp*> &hidden_nodesIAmFedIntoPtr, std::int32_t *NumWeightIAmToNodeIAmFedInto, thrust::device_vector<float> &delta, Activation activation) {
  
  thrust::counting_iterator<std::int32_t> CounterBegin(0);
  thrust::counting_iterator<std::int32_t> CounterEnd = CounterBegin + delta.size();

  switch(hidden_nodesIAmFedIntoPtr.size()) {
   
  case 0:
    throw std::invalid_argument("Hidden node is not fed into any other node!");
    
  case 1:
    thrust::transform(CounterBegin, CounterEnd, delta.begin(), SumDeltaActivation1(activation, hidden_nodesIAmFedIntoPtr.data(), NumWeightIAmToNodeIAmFedInto));
     break;

  }
};



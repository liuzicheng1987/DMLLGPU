class NodeSamplerCpp: public NeuralNetworkNodeCpp {

private:


  std::int32_t skip_;//skip_ denotes the number of random numbers we need to skip

  thrust::device_vector<float> random_numbers_;//We pre-store random_numbers for efficiency

  float *random_numbers_ptr_;//Pointer to random numbers

  std::int32_t numbers_per_kernel_;//Random numbers to be generated by each kernel

  std::int32_t num_kernels_;//Number of kernels to be used when generating random numbers

  std::random_device random_seed_;//Seed used when generating random numbers

public:

  NodeSamplerCpp(
	     std::int32_t    _node_number,
	     std::int32_t    _numbers_per_kernel,
	     std::int32_t    _num_kernels,
	     std::int32_t   *_hidden_nodes_fed_into_me,
	     std::int32_t    _hidden_nodes_fed_into_me_length
	     );

  ~NodeSamplerCpp();

  //Used to get the number of weights required
  //(very important to finalise the neural network)
  std::int32_t get_num_weights_required();

  //Calculate the output of the node
  void calc_output(
		   const std::int32_t _batch_num,
		   const std::int32_t _batch_size
		   );

  //Calculate the delta of the node (which is used for backpropagation)
  void calc_delta(std::int32_t _batch_size);

};

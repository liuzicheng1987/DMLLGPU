class NumericallyOptimisedMLAlgorithmCpp {

	public:
			
	NumericallyOptimisedMLAlgorithmCpp();
	
	virtual ~NumericallyOptimisedMLAlgorithmCpp();
	
	int Getsum_gradients_length();
		
	void Getsum_gradients (double *sum_gradients, int sum_gradients_length);

	int GetSumSubgradients_length();
		
	void GetSumSubgradients (double *SumSubgradients, int SumSubgradients_length);

	void GetParams(double *W, int lengthW);
		
	void SetParams(double *W, int lengthW);
	
	int Getlength_W();	
};

class OptimiserCpp {
	
	public:

	OptimiserCpp(const int size, const int rank);

	virtual ~OptimiserCpp();

};

class GradientDescentCpp: public OptimiserCpp {
	
	public:
		
	GradientDescentCpp (double learning_rate, double learning_rate_power, const int size, const int rank):OptimiserCpp(size, rank);

	~GradientDescentCpp();
				
};

class GradientDescentWithMomentumCpp: public OptimiserCpp {
	
	public:
		
	GradientDescentWithMomentumCpp (double learning_rate, double learning_rate_power, double momentum, const int size, const int rank):OptimiserCpp(size, rank);

	~GradientDescentWithMomentumCpp();
				
};

class AdaGradCpp: public OptimiserCpp {
	
	public:
		
	AdaGradCpp (double learning_rate, double learning_rate_power, const int size, const int rank):OptimiserCpp(size, rank);

	~AdaGradCpp();
				
};



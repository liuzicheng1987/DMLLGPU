#include <thrust/transform_reduce.h>
#include <thrust/functional.h>

template<typename T>
struct absolute_value : public unary_function<T,T>
{
  __host__ __device__ T operator()(const T &x) const
  {
    return x < T(0) ? -x : x;
  }
};

std::int32_t main(void) {

  std::int32_t data[6] = {-1, 0, -2, -2, 1, -3};

  std::int32_t result = thrust::transform_reduce(data,
					data + 6,
					absolute_value<std::int32_t>(),
					0,
					thrust::maximum<std::int32_t>()
					);
  
  std::cout << result << std:endl;

}

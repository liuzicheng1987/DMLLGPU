class SGDCpp: public OptimiserCpp {
	
private:

  float learning_rate, learning_rate_power;

  std::int32_t epoch_num;

public:
		
  //Initialise the GradientDescent function
  SGDCpp (float _learning_rate, float _learning_rate_power/*, const std::int32_t _size, const std::int32_t _rank*/): OptimiserCpp(/*size, rank*/) {
	
    //Store all of the input values
    this->learning_rate = _learning_rate; 
    this->learning_rate_power = _learning_rate_power;

    this->epoch_num = 0;//Initialise number of epochs to zero
		
  }

  //Destructor		
  ~SGDCpp() {}
		
   //dev_function_type is defined in OptimiserCpp.hpp!
  void min(/*MPI_Comm comm,*/dev_function_type _dfdw, thrust::device_vector<float> &_W, const float _tol, const std::int32_t _max_num_epochs, std::vector<float> &_sum_gradients);
		
};


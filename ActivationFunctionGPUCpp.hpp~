class ActivationFunctionCpp: public NeuralNetworkNodeCpp {

public:

  ActivationFunctionCpp(
			   std::int32_t  _node_number,
			   std::int32_t *_input_nodes_fed_into_me_dense,
			   std::int32_t  _input_nodes_fed_into_me_dense_length,
			   std::int32_t *_input_nodes_fed_into_me_sparse,
			   std::int32_t  _input_nodes_fed_into_me_sparse_length,
			   std::int32_t *_hidden_nodes_fed_into_me,
			   std::int32_t  _hidden_nodes_fed_into_me_length,
			   std::int32_t  _i_share_weights_with,
			   bool          _no_weight_updates
			   );

  ~ActivationFunctionCpp();

  //Forward propagation and backpropagation
  //These are function pointers that call on the
  //appropriate kernel functions to do the actual processing

  std::function<void(
		     const float                   *W,
		     NeuralNetworkNodeCpp      **hidden_nodes_fed_into_me_ptr,
		     std::size_t                    hidden_nodes_fed_into_me_ptrSize,
		     thrust::device_vector<float>  &output
		     )> forward_propagation;
  //Function pointer, which contains the activation function

  std::function<void(
		     const float                   *W,
		     NeuralNetworkNodeCpp      **hidden_nodes_fed_into_me_ptr,
		     std::size_t                    hidden_nodes_fed_into_me_ptrSize,
		     thrust::device_vector<float>  &output,
		     thrust::device_vector<float>  &delta
		     )> backpropagation;
//Function pointer, which contains the derivative of the activation function

  std::int32_t get_num_weights_required();\
//Used to get the number of weights required
//(very important to finalise the neural network)

  void calc_output(
		   const std::int32_t _batch_num,
		   const std::int32_t _batch_size
		   );//Calculate the output of the node


  void calc_delta();
  //Calculate the delta of the node (which is used for backpropagation)

  void calc_dLdw(
		 float              *_dLdw,
		 const std::int32_t  _batch_num,
		 const std::int32_t  _batch_size
		 );
  //Calculate the derivatives for the individual weights

};

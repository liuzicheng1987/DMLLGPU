# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DiscoveryCpp', [dirname(__file__)])
        except ImportError:
            import _DiscoveryCpp
            return _DiscoveryCpp
        if fp is not None:
            try:
                _mod = imp.load_module('_DiscoveryCpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _DiscoveryCpp = swig_import_helper()
    del swig_import_helper
else:
    import _DiscoveryCpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class NeuralNetworkNodeCpp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuralNetworkNodeCpp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuralNetworkNodeCpp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiscoveryCpp.new_NeuralNetworkNodeCpp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiscoveryCpp.delete_NeuralNetworkNodeCpp
    __del__ = lambda self : None;
NeuralNetworkNodeCpp_swigregister = _DiscoveryCpp.NeuralNetworkNodeCpp_swigregister
NeuralNetworkNodeCpp_swigregister(NeuralNetworkNodeCpp)

class ActivationFunctionCpp(NeuralNetworkNodeCpp):
    __swig_setmethods__ = {}
    for _s in [NeuralNetworkNodeCpp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivationFunctionCpp, name, value)
    __swig_getmethods__ = {}
    for _s in [NeuralNetworkNodeCpp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActivationFunctionCpp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiscoveryCpp.new_ActivationFunctionCpp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiscoveryCpp.delete_ActivationFunctionCpp
    __del__ = lambda self : None;
ActivationFunctionCpp_swigregister = _DiscoveryCpp.ActivationFunctionCpp_swigregister
ActivationFunctionCpp_swigregister(ActivationFunctionCpp)

class LogisticActivationFunctionCpp(ActivationFunctionCpp):
    __swig_setmethods__ = {}
    for _s in [ActivationFunctionCpp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogisticActivationFunctionCpp, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivationFunctionCpp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogisticActivationFunctionCpp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiscoveryCpp.new_LogisticActivationFunctionCpp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiscoveryCpp.delete_LogisticActivationFunctionCpp
    __del__ = lambda self : None;
LogisticActivationFunctionCpp_swigregister = _DiscoveryCpp.LogisticActivationFunctionCpp_swigregister
LogisticActivationFunctionCpp_swigregister(LogisticActivationFunctionCpp)

class LinearActivationFunctionCpp(ActivationFunctionCpp):
    __swig_setmethods__ = {}
    for _s in [ActivationFunctionCpp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearActivationFunctionCpp, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivationFunctionCpp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearActivationFunctionCpp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiscoveryCpp.new_LinearActivationFunctionCpp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiscoveryCpp.delete_LinearActivationFunctionCpp
    __del__ = lambda self : None;
LinearActivationFunctionCpp_swigregister = _DiscoveryCpp.LinearActivationFunctionCpp_swigregister
LinearActivationFunctionCpp_swigregister(LinearActivationFunctionCpp)

class NeuralNetworkCpp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuralNetworkCpp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuralNetworkCpp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _DiscoveryCpp.new_NeuralNetworkCpp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _DiscoveryCpp.delete_NeuralNetworkCpp
    __del__ = lambda self : None;
    def init_hidden_node(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_init_hidden_node(self, *args)
    def init_output_node(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_init_output_node(self, *args)
    def get_length_params(self): return _DiscoveryCpp.NeuralNetworkCpp_get_length_params(self)
    def get_params(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_params(self, *args)
    def set_params(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_set_params(self, *args)
    def get_input_nodes_fed_into_me_dense_length(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_input_nodes_fed_into_me_dense_length(self, *args)
    def get_input_nodes_fed_into_me_dense(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_input_nodes_fed_into_me_dense(self, *args)
    def get_input_nodes_fed_into_me_sparse_length(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_input_nodes_fed_into_me_sparse_length(self, *args)
    def get_input_nodes_fed_into_me_sparse(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_input_nodes_fed_into_me_sparse(self, *args)
    def get_hidden_nodes_fed_into_me_length(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_hidden_nodes_fed_into_me_length(self, *args)
    def get_hidden_nodes_fed_into_me(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_get_hidden_nodes_fed_into_me(self, *args)
    def finalise(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_finalise(self, *args)
    def load_dense_data(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_load_dense_data(self, *args)
    def load_sparse_data(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_load_sparse_data(self, *args)
    def transform(self, *args): return _DiscoveryCpp.NeuralNetworkCpp_transform(self, *args)
    def get_sum_output_dim(self): return _DiscoveryCpp.NeuralNetworkCpp_get_sum_output_dim(self)
NeuralNetworkCpp_swigregister = _DiscoveryCpp.NeuralNetworkCpp_swigregister
NeuralNetworkCpp_swigregister(NeuralNetworkCpp)

# This file is compatible with both classic and new-style classes.


